#include "Display.h"
#include "IConnection.h"

// Arduino PORTC = A0..A7
#define AddressPort PORTC
#define AddressPortDirection DDRC
#define AddressMask 0b00111111

// Arduino PORTD = RX0+TX1+D2..D7
#define DataPort PORTD
#define DataPortDirection DDRD
#define DataMask 0b11111111

// Arduino PORTB = D8..D13
#define ControlPort PORTB
#define ControlPortDirection DDRB
#define ControlPort_cD PORTB0
#define ControlPort_WR PORTB1
#define ControlPort_BUSY PORTB2
#define ControlPort_ENABLE PORTB3

#define SetBits(reg,value,valueMask) { (reg) = ((reg) & ~(valueMask)) | ((value) & (valueMask));}
#define SetBitPos(reg,pos,val) { if (val) (reg) |= (1<<(pos)); else (reg) &= ~(1 << (pos));}

class Connection : public GU20x8::IConnection
{
    virtual void ConfigureBus()
    {
        AddressPortDirection |= AddressMask;
        DataPortDirection |= DataMask;
        ControlPortDirection |= (1 << ControlPort_cD) | (1 << ControlPort_WR) | (1 << ControlPort_ENABLE);
        ControlPortDirection &= ~(1 << ControlPort_BUSY);
    }

    virtual void SetAddressBus(uint8_t address)
    {
        SetBits(AddressPort, address, AddressMask);
    }
    virtual void SetDataBus(uint8_t data)
    {
        SetBits(DataPort, data, DataMask);
    }
    virtual void SetCDBit(bool value)
    {
        SetBitPos(ControlPort, ControlPort_cD, value);
    }
    virtual void SetENBit(bool value)
    {
        SetBitPos(ControlPort, ControlPort_ENABLE, value);
    }
    virtual void SetWRBit(bool value)
    {
        SetBitPos(ControlPort, ControlPort_WR, value);
    }
    virtual bool GetBusyBit()
    {
        return ControlPort & ControlPort_BUSY;
    }
};

Connection connection;
GU20x8::Display vfd(connection);

// Розміри екрану
#define WIDTH 20
#define HEIGHT 8

// Массив для збереження станів клітин
byte grid[HEIGHT][WIDTH];  // Для збереження типу клітин (0 - червоний, 1 - блакитний, 2 - білий)
byte nextGrid[HEIGHT][WIDTH];  // Для збереження наступного покоління клітин

// Функція для ініціалізації початкового стану з випадковими клітинами
void initializeGrid() {
  for (int i = 0; i < HEIGHT; i++) {
    for (int j = 0; j < WIDTH; j++) {
      grid[i][j] = random(0, 3);  // Випадкове значення від 0 до 2 для трьох кольорів
    }
  }
}

// Функція для підрахунку кількості сусідів для кожної клітини
int countNeighbors(int x, int y) {
  int neighbors[3] = {0, 0, 0}; // Лічильники для кожного кольору клітин
  for (int dx = -1; dx <= 1; dx++) {
    for (int dy = -1; dy <= 1; dy++) {
      if (dx == 0 && dy == 0) continue; // Пропускаємо саму клітину
      int nx = (x + dx + WIDTH) % WIDTH;
      int ny = (y + dy + HEIGHT) % HEIGHT;
      neighbors[grid[ny][nx]]++; // Лічильник для відповідного кольору клітини
    }
  }
  // Повертаємо кількість сусідів кожного кольору
  return neighbors[0];  // Ви можете повернути інші значення в залежності від логіки
}

// Функція для обчислення наступного покоління
void updateGrid() {
  for (int y = 0; y < HEIGHT; y++) {
    for (int x = 0; x < WIDTH; x++) {
      int neighbors = countNeighbors(x, y);
      
      // Правила гри Life (можна адаптувати під кольори):
      if (grid[y][x] == 0) {  // Червона клітина
        nextGrid[y][x] = (neighbors == 2 || neighbors == 3) ? 0 : 1; // Червона може стати блакитною
      } else if (grid[y][x] == 1) {  // Блакитна клітина
        nextGrid[y][x] = (neighbors == 2 || neighbors == 3) ? 1 : 2; // Блакитна може стати білою
      } else {  // Біла клітина
        nextGrid[y][x] = (neighbors == 3) ? 2 : 0; // Біла може стати червоною
      }
    }
  }

  // Копіюємо нові стани в основний масив
  for (int y = 0; y < HEIGHT; y++) {
    for (int x = 0; x < WIDTH; x++) {
      grid[y][x] = nextGrid[y][x];
    }
  }
}

// Функція для оновлення дисплея
void updateDisplay() {
  for (int col = 0; col < WIDTH; col++) {
    byte red = 0b00000000;
    byte blue = 0b00000000;
    byte white = 0b00000000;

    for (int row = 0; row < HEIGHT; row++) {
      if (grid[row][col] == 0) {  // Червона клітина
        red |= (1 << row);
      } else if (grid[row][col] == 1) {  // Блакитна клітина
        blue |= (1 << row);
      } else if (grid[row][col] == 2) {  // Біла клітина
        red |= (1 << row);
        blue |= (1 << row);  // Білий - це червоний + блакитний
      }
    }

    vfd.WriteColumn(col, red, blue); // Оновлюємо стовпець на дисплеї
  }
}

void setup()
{
    randomSeed(analogRead(0));  // Ініціалізація генератора випадкових чисел
    vfd.Begin();              // Ініціалізація дисплея
    vfd.ClearScreen();        // Очищення екрану
    vfd.SetBrightness(3);     // Встановлення яскравості
    vfd.EnableDisplay();      // Включення дисплея
  
    initializeGrid();         // Ініціалізація початкового стану з випадковими клітинами
}

void loop()
{
    updateDisplay();  // Оновлюємо дисплей
    delay(10);       // Затримка 500 мс

    updateGrid();     // Обчислюємо наступне покоління
}
